nrn_load_dll("./channels/x86_64/.libs/libnrnmech.so")

celsius = 37

load_file("reduced_geometry_20com.hoc")

/////////////////////////////////////////////
// Define The Sections for Each Conductance

objref nat_list
objref kfast_list
objref kslow_list
objref ih_list

objref excsyn_list
objref inhdendsyn_list
objref inhsomasyn_list

nat_list = new SectionList()
kslow_list = new SectionList()
kfast_list = new SectionList()
ih_list = new SectionList()

excsyn_list = new SectionList()
inhdendsyn_list = new SectionList()
inhsomasyn_list = new SectionList()

basal			ih_list.append()
apical			ih_list.append()
tuft			ih_list.append()

basal			excsyn_list.append()
apical			excsyn_list.append()
tuft			excsyn_list.append()

basal			inhdendsyn_list.append()
apical			inhdendsyn_list.append()

soma			inhsomasyn_list.append()

soma			nat_list.append()
hillock			nat_list.append()
iseg			nat_list.append()
apical			nat_list.append()
tuft 			nat_list.append()

soma			kfast_list.append()
apical			kfast_list.append()
tuft			kfast_list.append()

soma			kslow_list.append()
apical			kslow_list.append()
tuft			kslow_list.append()


//////////////////////////////////////////////////////////////////////////////////////////
// Define synapses in various areas of the cell
//   and set the connection parameters (synapse rise time, decay time, reversal potential, conductance/weight)

objref preInhSoma_list, preInhDend_list, preExcDend_list
preInhSoma_list = new List()
preInhDend_list = new List()
preExcDend_list = new List()

objref syn_
s=0
strdef cmdstr
forsec inhsomasyn_list {
	syn_ = new MyExp2Syn(0.5)  preInhSoma_list.append(syn_)	// AMPA		EC
	syn_.tau1 = 0.5
	syn_.tau2 = 3
	syn_.e = -70
	sprint(cmdstr,"objref recInhSomaCurrent%d", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recInhSomaCurrent%d = new Vector()", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recInhSomaCurrent%d.record(&preInhSoma_list.object(%d).i)", s, s)
	{execute(cmdstr)}
	s = s + 1
}
totInhSoma = s

s = 0
forsec inhdendsyn_list {
	syn_ = new MyExp2Syn(0.5)  preInhDend_list.append(syn_)	// AMPA		EC
	syn_.tau1 = 0.5
	syn_.tau2 = 3
	syn_.e = -70
	sprint(cmdstr,"objref recInhDendCurrent%d", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recInhDendCurrent%d = new Vector()", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recInhDendCurrent%d.record(&preInhDend_list.object(%d).i)", s, s)
	{execute(cmdstr)}
	s = s + 1
}
totInhDend = s

s = 0
forsec excsyn_list {
	syn_ = new MyExp2Syn(0.5)  preExcDend_list.append(syn_)	// AMPA		EC
	syn_.tau1 = 1
	syn_.tau2 = 5
	syn_.e = 0
	sprint(cmdstr,"objref recExcCurrent%d", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recExcCurrent%d = new Vector()", s)
	{execute(cmdstr)}
	sprint(cmdstr,"recExcCurrent%d.record(&preExcDend_list.object(%d).i)", s, s)
	{execute(cmdstr)}
	s = s + 1
}
totExc = s

excitatory_syn_weight = 0.005 // the maximum synaptic conductance in microSiemens, aka the synaptic amplitude, of the excitatory connections
inhDend_syn_weight = 0.003 // the maximum synaptic conductance of the inhibitory connections onto the dendrites
inhSoma_syn_weight = 0.006 // the maximum synaptic conductance of the inhibitory connections onto the soma

//////////////////////////////////////////////////////////////////////////////////////////
// Connect the stimulation cells to the synapses on the pyramidal cell
objref nclist, nc, syn
nclist = new List()
print "excStimcell_list length = ", excStimcell_list.count(), " and preExcDend_list length = ", preExcDend_list.count()
for r=0, excStimcell_list.count()-1{
	for j=0, preExcDend_list.count()-1 { // For each synapse location in the list of excitatory synapses on the dendrite
		syn = preExcDend_list.object(j) // grab the synapse object
		nc = excStimcell_list.object(r).connect2target(syn) // connect the presynaptic cell (excStimcell_list.object(r) to the synapse object on the postsynaptic cell (syn)
		nclist.append(nc)
		nc.delay = 3 // ms, the length of the axonal conduction delay and the synaptic delay
		nc.weight = excitatory_syn_weight
		print "adding exc syn from ", r, " to Excitatory synapse #", j
	}
}

for r=0, inhDendStimcell_list.count()-1{
	for j=0, preInhDend_list.count()-1 { // For each synapse location in the list of excitatory synapses on the dendrite
		syn = preInhDend_list.object(j) // grab the synapse object
		nc = inhDendStimcell_list.object(r).connect2target(syn) // connect the presynaptic cell (inhDendStimcell_list.object(r) to the synapse object on the postsynaptic cell (syn)
		nclist.append(nc)
		nc.delay = 3 // ms, the length of the axonal conduction delay and the synaptic delay
		nc.weight = inhDend_syn_weight
		print "adding inhdend syn from ", r, " to inhibitory dendritic synapse #", j
	}
}

for r=0, inhSomaStimcell_list.count()-1{
	for j=0, preInhSoma_list.count()-1 { // For each synapse location in the list of excitatory synapses on the dendrite
		syn = preInhSoma_list.object(j) // grab the synapse object
		nc = inhSomaStimcell_list.object(r).connect2target(syn) // connect the presynaptic cell (inhSomaStimcell_list.object(r) to the synapse object on the postsynaptic cell (syn)
		nclist.append(nc)
		nc.delay = 3 // ms, the length of the axonal conduction delay and the synaptic delay
		nc.weight = inhSoma_syn_weight
		print "adding inhsoma syn from ", r, " to inhibitory somatic synapse #", j
	}
}

// Note: the configuration of the for loop decides how many synapses are going to made:
// for r=0, inhSomaStimcell_list.count()-1{
// 	for j=0, preInhSoma_list.count()-1 {
//      ...
//  }
// }
// ===> This allows each stim cell in the list of inhSomaStimcell_list to make a synapse onto every possible synapse location in preInhSoma_list
//
// whereas:
// for j=0, preInhSoma_list.count()-1 {
//  if (j<inhSomaStimcell_list.count()){
//      r = j
//      ...
//  }
// }
// ===> This connects each stim cell in the list of inhSomaStimcell_list to a single, unique synapse in preInhSoma_list
//
// whereas:
// for j=0, preInhSoma_list.count()-1 {
//    r = 0
//    ....
// }
// ===> This connects a single stim cell (the first entry in inhSomaStimcell_list) to every synapse in preInhSoma_list

//////////////////////////////////////////////////////////////////////////////////////////
// Insert the Channels in the Correct Section and Set the Reversal Potentials

forall {
	insert pas
	g_pas = 1./15000
	e_pas = -70
	cm = 1.0
}

forsec ih_list {
	insert ih
	ehd_ih = -47
}

forsec nat_list {
	insert nat
	ena = 55
	vshift_nat = 10
}

forsec kfast_list {
	insert kfast
	ek = -80
}

forsec kslow_list {
	insert kslow
	ek = -80
}

tuft {
	insert cad
	insert sca
	insert kca

	eca = 140
	ion_style("ca_ion",0,1,0,0,0)
}

soma insert nap
soma insert km

Rm_axosomatic = 15000
spinefactor = 2.0

decay_kfast = 50.0
decay_kslow = 50.0

proc recalculate_passive_properties() {
	forsec axosomatic_list g_pas = 1./Rm_axosomatic
	forsec apicaltree_list g_pas = soma.g_pas*spinefactor 
	
	forsec apicaltree_list cm = soma.cm*spinefactor
}

proc recalculate_channel_densities() {
	
	// See Keren et al. 2009
	
	soma distance()
	
	forsec apicaltree_list {
	 for(x) gbar_kfast(x) = soma.gbar_kfast(0.5) * exp(-distance(x)/decay_kfast)
	 for(x) gbar_kslow(x) = soma.gbar_kslow(0.5) * exp(-distance(x)/decay_kslow)
	}
	
	tuft mih = gbar_ih/distance(0)
	tuft mnat = (gbar_nat-soma.gbar_nat(0.5))/distance(0)
	
	apical for(x) gbar_nat(x) = mnat*distance(x) + soma.gbar_nat(0.5)
	apical for(x) gbar_ih(x) = mih*distance(x)
}

recalculate_passive_properties()
recalculate_channel_densities()
