// define_stimcells.hoc



objref excStimcell_list, inhDendStimcell_list, inhSomaStimcell_list
excStimcell_list = new List()
inhDendStimcell_list = new List()
inhSomaStimcell_list = new List()
if (addSynInputs>0) {
	numExcCells = 2
	numInhDendCells = 2
	numInhSomaCells = 1
} else {
	numExcCells = 0
	numInhDendCells = 0
	numInhSomaCells = 0
}
ntot = numExcCells + numInhDendCells + numInhSomaCells
proc make_stim_cells() {local i,j  localobj cell, nc, nil
	excStimcell_list = new List()
	inhDendStimcell_list = new List()
	inhSomaStimcell_list = new List()
	
	for r=0, numExcCells-1 {
		cell = new stimcell()	// BC
		cell.pp.start = 0
		cell.pp.interval = 125
		excStimcell_list.append(cell)
	}
	for r=0, numInhDendCells-1 {
		cell = new stimcell()	// BC
		cell.pp.interval = 125*2
		cell.pp.start = 125/2
		inhDendStimcell_list.append(cell)
		print "adding inh cell that starts at ", cell.pp.start, " with interval ", cell.pp.interval
	}
	for r=0, numInhSomaCells-1 {
		cell = new stimcell()	// BC
		cell.pp.interval = 125*2
		cell.pp.start = 125/2+125
		inhSomaStimcell_list.append(cell)
		print "NOW adding inh cell that starts at ", cell.pp.start, " with interval ", cell.pp.interval
	}
}
make_stim_cells()