
// Spike recording
objref tvec, idvec, vvec, tuftvec, apicvec  // will be Vectors that record all spike times (tvec)
        // and the corresponding id numbers of the cells that spiked (idvec)
  tvec = new Vector()
  idvec = new Vector()
  vvec = new Vector()
  tuftvec = new Vector()
  apicvec = new Vector()
proc spikerecord() {local i  localobj nc, nil
  print "Record spikes..."
  
  for i=0, excStimcell_list.count-1 {
    nc = excStimcell_list.object(i).connect2target(nil)
    nc.record(tvec, idvec, i)
  }
  for i=0, inhDendStimcell_list.count-1 {
    nc = inhDendStimcell_list.object(i).connect2target(nil)
    nc.record(tvec, idvec, i+excStimcell_list.count())
	print "inhibitory spikes..."
  }
  for i=0, inhSomaStimcell_list.count-1 {
    nc = inhSomaStimcell_list.object(i).connect2target(nil)
    nc.record(tvec, idvec, i+excStimcell_list.count()+inhDendStimcell_list.count())
	print "more inhibitory spikes..."
  }
  vvec.record(&soma.v(0.5))
  tuftvec.record(&tuft.v(0.5))
  apicvec.record(&apical.v(0.5))

}

objref nil
soma nc = new NetCon(&v(1), nil)
nc.threshold = -10
nc.record(tvec, idvec, excStimcell_list.count()+inhDendStimcell_list.count()+inhSomaStimcell_list.count())


spikerecord()


objref fo
strdef fno, fstem
sprint(fstem,"Results\\%s", simname)
proc spikeout() { local i  
  printf("\ntime\t cell\n")  // print header once
  sprint(fno,"%s_sptimes.dat", fstem)
  fo = new File(fno)
  fo.wopen()
  for i=0, tvec.size-1 {
    printf("%g\t %d\n", tvec.x[i], idvec.x[i])
    fo.printf("%g\t %d\n", tvec.x[i], idvec.x[i])
  }
  fo.close()
  
  sprint(fno,"%s_potential.dat", fstem)
  fo = new File(fno)
  fo.wopen()
  fo.printf("Time\tSoma\tTuft\tApical\n")
  for i=0, vvec.size-1 {
    fo.printf("%g\t%f\t%f\t%f\n", i*dt, vvec.x[i], tuftvec.x[i], apicvec.x[i])
  }
  fo.close()
  
  
}

strdef headerline, argline, formatline, wholeline
headerline = "Time"
argline=", dt*i"
formatline="%g"
for x = 0, totInhDend-1 {
	sprint(headerline,"%s\tInhDendSyn%g", headerline, x)
	sprint(argline,"%s, recInhDendCurrent%g.x[i]", argline, x)
	sprint(formatline,"%s\\t%%f", formatline, x)
}
for x = 0, totInhSoma-1 {
	sprint(headerline,"%s\tInhSomaSyn%g", headerline, x)
	sprint(argline,"%s, recInhSomaCurrent%g.x[i]", argline, x)
	sprint(formatline,"%s\\t%%f", formatline, x)
}
for x = 0, totExc-1 {
	sprint(headerline,"%s\tExcSyn%g", headerline, x)
	sprint(argline,"%s, recExcCurrent%g.x[i]", argline, x)
	sprint(formatline,"%s\\t%%f", formatline, x)
}

sprint(headerline,"%s\n", headerline)
sprint(formatline,"%s\\n", formatline)


sprint(wholeline,"fo.printf(\"%s\"%s)", formatline, argline)
print wholeline

proc synout() {
  sprint(fno,"%s_synapticcurrents.dat", fstem)
  fo = new File(fno)
  fo.wopen()
  fo.printf(headerline)
  for i=0, recInhDendCurrent0.size-1 {
	{execute(wholeline)}
    //fo.printf("%g\t%f\t%f\t%f\n", dt*i, recInhDendCurrent.x[i], recInhSomaCurrent.x[i], recExcCurrent.x[i])
  }
  fo.close()
}


// produce raster plot of spiking activity
objref gs
proc spikeplot() { local i
  gs = new Graph()
  gs.size(0, tstop, -1, ntot+2)
  for i=0, tvec.size-1 {
    gs.mark(tvec.x[i], idvec.x[i]+1, "|", 8)
  }
  gs.flush()
}


// panel for simulation results
proc xspikeres() {
  xpanel("Spike results")
  xbutton("Write out spikes", "spikeout()")
  xbutton("Write out syn currents", "synout()")
  xbutton("Plot", "spikeplot()")
  xpanel()
}


if (batchflag==1) {
	print "Now running simulation "
	run()
	spikeout()
	synout()
	if (plotflag==1) {
		spikeplot()
	}
	print "** Finished running sim and printing results **"
} else {
	// panel for simulation results
	xspikeres()
}

